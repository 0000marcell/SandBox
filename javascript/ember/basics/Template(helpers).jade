
extends ./templates/note.jade

block title
  .title 
    li.
     Template(helpers)
block d
  p.
    helper are used in views and are mainly used to format strings
block u
  p.
    a variety of use cases, the most commin being format strings
block m
  pre.
    in your view 
    Your total is {{format-current model.totalDue}}
  
    in your app/helpers/format-currency.js 

    export default Ember.Helpers.helper(function(params){
      let value = params[0], 
          dolars = Math.floor(value / 100);
          cents = value % 100;
          sign = '$';
      if (cents.toString().length === 1) { cents = '0' + cents;}
      return `${sign}${dollars}.${cents}`; 
    });

    OBS: ember helper do not require a - in their name(unlike components)

    you can use multiple params 
    {{my-helper "hello" "world"}}

    named arguments: 
    {{format-currency 350 sign="Â£"}}
    export default Ember.Helper.helper(function(params, namedArgs) {
      let value = params[0],
          dollars = Math.floor(value / 100),
          cents = value % 100,
          sign = namedArgs.sign === undefined ? '$' : namedArgs.sign;

      if (cents.toString().length === 1) { cents = '0' + cents; }
      return `${sign}${dollars}.${cents}`;
    });

    you can use javascript deconstructive short hand 
    export default Ember.Helper.helper(function(params, { option1, option2, option3 }) {
      console.log(option1); // => "hello"
      console.log(option2); // => "world"
      console.log(option3); // => "goodbye cruel world"
    });

    you can also create a class based helper, if you want to have 
    states in the helpers 

    export default Ember.Helper.extend({
    authentication: Ember.inject.service(),
      compute() {
        let authentication = this.get('authentication');

        if (authentication.get('isAuthenticated')) {
          return 'Welcome back, ' + authentication.get('username');
        } else {
          return 'Not logged in';
        }
      }
    });

    not escaping html in helpers 
    return Ember.String.htmlSafe(`<b>${params[0]}</b>`);
  
block e
  p.
    same as mehtod
block r
  p.
    Templates
      