Programming Paradigms: is a way of classifying programming languages according
to their styles.

Execution model: Specifies how execution takes place in a programming language
, implemented in interpreters or compilers , often having a runtime system.

Runtime system: any behavior that are dynamically determined during execution

Machine code: lowest level programing paradigm, directly represents structures
with assembly language and sequence of numbers 

Procedural programming: is also imperative, based on procedure calls, structure programming and modular programming. usually in procedure languages 
language and data are coupled resulting in shared data, procedural programing
languages are subjective and highly dependent on programmer experience.

Object oriented programming: based on objects that interact with each other,
objects have fields also known as attributes and procedures also known as methods, OOP is usually class-based but it can also be prototype-based

Prototype-based: Behavior reuse is performed via reuse of objects, object inherent from other objects, making the whole system much more dynamic and composable than class-based systems, objects are rarely created in prototyped based languages cloning objects are much more common.

Delegation: evaluation of a object proerty in context of another, a language runtime can do this via delegation pointers (from objects to its prototypes) 
classes in ES6 are just syntax sugar

Role: can be seen as object that serves diferent purposes based on context, the shared behavior between roles is handled by the delegation mechanism

Trait: trait is a concept in OOP, which represents a set of methods that can be used to extend the functionality of class. traits can be used to simulate multiple inheritance.

Interface: also known as protocol is a comman means for unrelated objects to comunicate with each other, these are definitions of methods and values which the objects agree upon in order to co-operate 

Mixin: is another way of solving multiple inheritance problems (like traits and interfaces) a mixim can be seen as a interface with implemented methods, mixin a pattern enforcing the dependency inversion principle.

Difference between traits mixins and interfaces: 
traits are more composable generally dont share state and resolve naming conflicts
Mixins are more loolely implemented can be included in other mixins, manage state and implement methods 
Interface dont implement methods and only serves as a means of communication between two classes

Diammond problem: is a ambiguity that arises when two classes B and C inherit from A, and class D inherits from both B and C if there is a method in A that B and C have overridden, and D does not override it, then which version of the method does D inherrit that of B, or that of C?

Prototype chain: is the way that objects make references of properties or methods in the prototype of other objects.

Factory function: in javascript any function can return a new object, when its not a constructor function or class, its called a factory function, different from constructor, different from constructors factory functions returns a prototype taht can't be altered, you can extend the object but since you dont know the prototype you can't alter it, factory functions creates a hieranchy based on has-a instead of is-a 

composition-vs-inheritance: using composition we design types based on that they do not what they are

composability: composability is a system design principal that deals with inter-relationship of components. A highly composable system provides recombinant components that can be selected and assembled in various combinations to satisfy, user requirements.

duck typing: is concerned with stablishing the suitability of an object for some purpose, type checking is deferred to runtime and is implemented by means of dynamic typing or reflection 

concatenation prototyping: pure prototyping the prototype (parent) is copied 
rather than linked to, changes to the prototype will not be reflected in cloned objects 

declarative programing: a style of building the structure and elements of a computer program, that expresses the logic of a computation without describing its control flow. languages that applies this style minimize side effects by describing what the program must acomplish rather than describing how to acomplish

logic programing: logic programing paradigm viwes computation as automated reasoning over a corpus of knowledge, facts about the program domain are expressed as logic formulae and programs are executed by applying inference rules over them until an answer to the problem is found or the collection of formulae is provided incosistent.

expressions and statements: 
a expression is a combination of one or more explicit values, constructs, variables, operations and functions that the programming language interprets or computes to produce another value
statement is the smallest element of an imperative lenguage taht expresses some action to be carried out many statements are introduced by identifiers like (if, for etc)

Differences between statements and expressions: statements are executed expressions are evaluated
statement do not return results and are executed solely for their side effects
expressions always return a result and often do not have side effects

Lazy evaluation: lazy evaluation or call-by-need is a evaluation strategy which delays the evaluation of an expression until its value is needed 

memoization: after a function is computed for that parameter or a set of parameters the result is stored in a lookup table taht is indexed by the values of those parameters 

fold: also know as reduce accumulate, agregate, compress or inject, refers to a family of higher order functions that analyse a recursive data structure and though use of a given combining operation, recombine the results of recursively processing its constituent parts, building up a return value

corecursion: corecursive algorithms use the data that themselves produce, bit by bit as they become available, and needed, to produce further bits of data

functional programming: is a programming paradign that treats computation as the evaluation of mathematical functions and avoid changing state and mutable data. is declarative which means taht programs are made using expressions or declarations instead of statements, the result of the functions only depend of the arguments passed, this is called refferencial transparency the return value dont depent on the state of the executing program

curryng: is a technique of translating the evaluation of a function that takes multiple arguments into evaluating a sequence of functions each with a single argument.

higher-order functions: is a function that does at least one of the following. returns one or more functions as its result, or takes one or more function as arguments, hof is also known as functors

closures: closures are related with static scoping also known as lexical scope, a closure function references the outer scope of where it was defined.

pure functions: functions with no side effects. have several useful properties 
if the result of a pure function is not used it can be removed 
allow for memoization and other caching strategies
if there is no data dependency between 
two functions they can be executed in parallel
the evaluation of any pure expression is thread safe
more complex evolution strategies can be used by the compiler like deforestation

strict and non-strict: a.k.a eager and lazy evaluation strict(eager) always fully evaluates function arguments before invoking the function, lazy evaluation does not evaluate functional arguments unless their values are required to evaluate the function call it self

type inference: automatic dedution of data types used in fp and other languages like Go, Rust, etc..

first-class functions: a programming language is said to have first class functions if it treats functions as first class citizens. the language suport passing functions as arguments to other functions, returning them as values from other functions, assigning them to variables or storing them in data structures, suport for anonymous functions can also be required 

heap: a heap is a specialized tree-based data structure that satisfy the heap property, if A is a parent of B then the key (the value) of node A is ordered with respect of the key of node B with the same ordering applying across the heap, a heap can further be classified as a max heap or a min heap

comparison to imperative programing:
the most significant different stem from the fact that functional avoid side-effects the use of higher order functions and referencial transparency is another difference

simulating state: state in pure functional programming languages are usually done using monads or passing state using data structures, impure FP like closuje apply pure functions to change the current state

Symbolic programming: is a programming paradigm in which the program can manipulate its own formulas and components as if they were plain data

mindset: is a set of assumptions, methods or notions held by one or more people or groups of people that is so established that it creates a powerful incentive within these people or groups to continue to adopt these behaviors, choices or tools, this also can be called mental inertia "groupthinking" or a "paradigm"


