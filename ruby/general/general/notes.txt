$LOAD_PATH: global array with paths used in require, we do $LOAD_PATH.unshift "./path" to add a new path to the beggining of the array

everything is a object: in ruby everything is a object, strings, number etc...

Classes, Instances, methods: classes serves two purposes, container for methods and factory of objects, every class inherit from a super class when not defined, it will inherit from object

Objects all the way down: in ruby if you can reference it with a variable it is a object even true, false and nil are objects.

Importance of being a object: becase everything is a object every instance inherit object methods like 'instance_of' 'class' and 'to_s'

Public, Private and protected: methods are public by default, public methods can be called by any instance of the object, private methods can only be called inside the class or in a subclass, protected methods can be called on any instance of the class or subclasses, you can still call any private methods using 'send'(method from the object class)

Dont override methods from the object class: there are about 50 objects from the Object class, know their names and do not override them

ember dynamic typing:

the biggest advantage of tynamic types: is not needing to use abstract classes.

extreme decoupling: we dont need to write interfaces to conciliate different types in ruby, we dont need to make adjustments
because of duck typing which make classes less coupled, you dont need to worry about type which makes programming easier

required cerymony: in requred typing languages you need to declare the types wether it make sense or not, 

engineering is all about trade-off: the lack of type declarations make runtime errors like method missing possible, in some cases it
also makes code harder to read 

dont create more infrastructure than you already need 

dont artificially couple your classes together 

write specs: no ruby class method or program is finished without automated tests, tests should try out everything that can be tried out

stub: a stub is an object that implements the same inferface as one of the suporting cast members but returns canned answers when its methods are called

independent tests: avoid tests that depend on the output of another test

write as many tests as you can: if you dont have time to write good tests, write basic ones that tests the basic structures of your code
